// Cartier
var _inside = _inside || [];
// var _inside = [];
var _insideLoaded = _insideLoaded || false;
var _insideJQ = _insideJQ || null;

(function () {
	if (_insideLoaded)
		return;
	_insideLoaded = true;

	var accountKey = "IN-1008001";
	var trackerURL = "cdn5.eu.inside.chat";
	var subsiteId = null;
	var insideOrderTotal = insideOrderTotal || 0;
	var _insideMaxLoop = 25;
	var _insideCurLoop = 0;
	var _insideFirstLoad = false;
	var _insideCurrency = null;
	var _insideDataLayer = null;
	var _insideProduct = null;

	// Utility Functions
	function log() {
		if (typeof (console) != "undefined" && typeof (console.log) != "undefined") {
			// console.log("[INSIDE]", Array.prototype.slice.call(arguments));
		}
	}

	function deferWait(callback, test) {
		if (test()) {
			callback();
			return;
		}
		var _interval = 10;
		var _spin = function () {
			if (test()) {
				callback();
			}
			else {
				_interval = _interval >= 1000 ? 1000 : _interval * 2;
				setTimeout(_spin, _interval);
			}
		};
		setTimeout(_spin, _interval);
	}

	function keepWait(callback, test) {
		if (test()) {
			callback();
			if (_insideCurLoop >= _insideMaxLoop) {
				return;
			}
		}
		var _interval = 1000;
		var _spin = function () {
			if (test()) {
				_insideCurLoop = _insideCurLoop + 1;
				callback();
				if (_insideCurLoop >= _insideMaxLoop) {
					return;
				}
			}
			setTimeout(_spin, _interval);
		};
		setTimeout(_spin, _interval);
	}

	var indexOf = [].indexOf || function (prop) {
		for (var i = 0; i < this.length; i++) {
			if (this[i] === prop)
				return i;
		}
		return -1;
	};

	function myTrim(text) {
		try {
			if (typeof (text) != "undefined" && text != null)
				return typeof (text.trim) === "function" ? text.trim() : text.replace(/^\s+|\s+$/gm, '');
		} catch (trimex) { }

		return text;
	}

	function isNumeric(n) {
		try {
			return !isNaN(parseFloat(n)) && isFinite(n);
		}
		catch (tempex) {
		}

		return false;
	}

	function validateEmail(tempmail) {
		try {
			if (/^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\.[a-zA-Z0-9-]+)*$/.test(tempmail)) {
				return (true);
			}
		} catch (tempex) { }
		return (false);
	}

	function setCookie(cname, cvalue, exdays) {
		var hostName = window.location.hostname;
		var siteNameFragments = hostName.split(".");
		var siteName = siteNameFragments[1];
		var domain = siteNameFragments.slice(1, siteNameFragments.length).join(".");

		var d = new Date();
		d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
		var expires = "expires=" + d.toGMTString();
		document.cookie = cname + "=" + cvalue + "; " + expires + ";path=/" + ";domain=." + domain;
	}

	function getCookie(cname) {
		var name = cname + "=";
		var ca = document.cookie.split(';');
		for (var i = 0; i < ca.length; i++) {
			var c = myTrim(ca[i]);
			if (c.indexOf(name) == 0)
				return c.substring(name.length, c.length);
		}
		return null;
	}

	function deleteCookie(cname) {
		document.cookie = cname + "=" + 0 + "; " + "expires=01 Jan 1970 00:00:00 GMT" + ";path=/";
	}

	function roundToTwo(num) {
		if (Math != "undefined" && Math.round != "undefined")
			return +(Math.round(num + "e+2") + "e-2");
		else
			return num;
	}

	function getSearchParameters() {
		var prmstr = window.location.search.substr(1);
		return prmstr != null && prmstr != "" ? transformToAssocArray(prmstr) : [];
	}

	function transformToAssocArray(prmstr) {
		var params = [];
		var prmarr = prmstr.split("&");
		for (var i = 0; i < prmarr.length; i++) {
			params[i] = prmarr[i];
		}

		return params;
	}

	function randomIntFromInterval(min, max) {
		try {
			return Math.floor(Math.random() * (max - min + 1) + min);
		}
		catch (tempex) {
		}

		return min;
	}

	function getDecimalSign(number) {
		try {
			var tempnum = myTrim(number);

			if (tempnum.length > 3) {
				return tempnum.charAt(tempnum.length - 3);
			}
		}
		catch (signex) {
		}

		return ".";
	}

	// End of utility functions

	function processInside(tracker) {
		var searchUrl = "/search|search-results.html";
		var searchQueryString = null;
		var productCategoryUrl = null;
		var productCategoryQueryString = ".search-results__main";
		var productUrl = null;
		var productQueryString = ".pan-product-page";
		var checkoutUrl = "/shopping-bag|/checkout|/cart";
		var checkoutQueryString = null;
		var orderConfirmedUrl = "orderconfirmation.html";
		var orderConfirmedQueryString = null;

		function getViewData() {
			try {

				// Output view data
				// Default view data is "unknown"

				var insidedata = {};

				insidedata.action = "trackView";
				insidedata.type = "article";
				insidedata.url = window.location.href;
				insidedata.name = "Unknown Page: " + window.location.href;
				var tempurl = window.location.href.toLowerCase();

				var temppath = window.location.pathname;
				var temp_loc = temppath.split("/");
				var page = "";

				var add_tags = [];
				var params = getSearchParameters();
				var searchterm = "Search"; // Find the searchterm the
				// visitor
				// entered for the search page to be
				// used as the page name
				if (params != null && params.length > 0) {
					for (var i = 0; i < params.length; i++) {
						if (params[i].indexOf("q=") == 0) {
							searchterm = params[i].split("q=")[1];
						}
						if (params[i].indexOf("kwCAR=") == 0) {
							searchterm = params[i].split("kwCAR=")[1];
						}
					}
				}

				for (var i = 1; i < temp_loc.length; i++) {
					if (temp_loc[i] != null && temp_loc[i].length > 0) {
						if (temp_loc[i].indexOf("?") != -1) {
							var temploc = temp_loc[i].split("?")[0];
							if (temploc.length > 0)
								page = temp_loc[i];
						}
						else {
							page = temp_loc[i];
						}
					}
				}
				var curpage = page.split("?")[0];
				insidedata.name = curpage;

				// Identify and assign the correct page type here
				// The part below is actually very flexible, can use
				// dataLayer too
				// sometimes, etc so if needed can also just delete the
				// global
				// variable parts and make your own algorithm. From my
				// experience
				// the following part will rarely work for all websites.

				var temppagetype = "other";
				try {
					if (typeof (dataLayer) != "undefined" && dataLayer != null && dataLayer.length > 0) {
						for (var i = dataLayer.length - 1; i >= 0; i--) {
							if (dataLayer[i] && dataLayer[i].country && dataLayer[i].language) {
								_insideDataLayer = dataLayer[i];
							}
							if (dataLayer[i].pageType) {
								temppagetype = dataLayer[i].pageType.toLowerCase();
							}
						}

						for (var i = dataLayer.length - 1; i >= 0; i--) {
							if (dataLayer[i] && dataLayer[i].eeAction && dataLayer[i].eeAction == "eeProductDetail" && dataLayer[i].products && dataLayer[i].products.length > 0) {
								_insideProduct = dataLayer[i].products[0];
								break;
							}
						}

						if (typeof (_insideData) != "undefined" && _insideData != null && typeof (_insideData.page) != "undefined" && _insideData.page != null && typeof (_insideData.page.type) != "undefined" && _insideData.page.type != null && _insideData.page.type.length > 0) {
							temppagetype = _insideData.page.type.toLowerCase();
						}
					}
				} catch (tempex) { }

				if (temp_loc.length < 3) {
					insidedata.type = "homepage";
				}
				else if (temppagetype == "homepage") {
					insidedata.type = "homepage";
				}
				else if (temppagetype == "search") {
					insidedata.type = "search";
				}
				else if (temppagetype == "product" || temppagetype == "product page" || temppagetype == "item") {
					insidedata.type = "product";
				}
				else if (tempurl.indexOf("/login") != -1 || tempurl.indexOf("/regist") != -1) {
					insidedata.type = "login";
				}

				if (productCategoryUrl != null) {
					if (tempurl.indexOf(productCategoryUrl.toLowerCase()) > -1) {
						insidedata.type = "productcategory";
					}
				}
				if (productCategoryQueryString != null) {
					var tempelem = _insideJQ(productCategoryQueryString);
					if (tempelem != null && tempelem.length > 0) {
						insidedata.type = "productcategory";
					}
				}

				if (searchUrl != null) {
					if (tempurl.search(searchUrl.toLowerCase()) > -1) {
						insidedata.type = "search";
					}
				}
				if (searchQueryString != null) {
					var tempelem = _insideJQ(searchQueryString);
					if (tempelem != null && tempelem.length > 0) {
						insidedata.type = "search";
					}
				}

				if (productUrl != null) {
					if (tempurl.indexOf(productUrl.toLowerCase()) > -1) {
						insidedata.type = "product";
					}
				}
				if (productQueryString != null) {
					var tempelem = _insideJQ(productQueryString);
					if (tempelem != null && tempelem.length > 0) {
						insidedata.type = "product";
					}
				}

				if (checkoutUrl != null) {
					if (tempurl.search(checkoutUrl.toLowerCase()) > 0) {
						insidedata.type = "checkout";
					}
				}
				if (checkoutQueryString != null) {
					var tempelem = _insideJQ(checkoutQueryString);
					if (tempelem != null && tempelem.length > 0) {
						insidedata.type = "checkout";
					}
				}

				if (orderConfirmedUrl != null) {
					if (tempurl.indexOf(orderConfirmedUrl.toLowerCase()) > -1) {
						insidedata.type = "orderconfirmed";
					}
				}
				if (orderConfirmedQueryString != null) {
					var tempelem = _insideJQ(orderConfirmedQueryString);
					if (tempelem != null && tempelem.length > 0) {
						insidedata.type = "orderconfirmed";
					}
				}

				try {
					var temporder = orderConfirmProcess();
					if (temporder && temporder.length > 0) {
						insidedata.type = "orderconfirmed";
					}
				} catch (tempex) { }

				// Finish identying

				switch (insidedata.type) {
					case "homepage":
						insidedata.name = "Home";
						break;
					case "search":
						insidedata.name = "Search Result Page";
						if (searchterm != null && searchterm.length > 0) {
							insidedata.name = decodeURIComponent(searchterm);
							if (insidedata.name.indexOf("+") != -1) {
								insidedata.name = insidedata.name.replace(/\+/g, ' ');
							}
						}

						try {
							if (_insideDataLayer && _insideDataLayer.pagesubCategory == "search-no-hits") {
								add_tags.push("emptysearch");
							}
						} catch (tempex) { }
						break;
					case "productcategory":
						var tempcat = getCategory();
						if (tempcat != null && tempcat.length > 0) {
							if (tempcat.length > 149)
								tempcat = tempcat.substring(0, 149);
							insidedata.category = tempcat;
						}

						var tempPageName = getPageName();
						if (tempPageName != null && tempPageName.length > 0)
							insidedata.name = tempPageName;

						break;
					case "product":
						var tempPageName = getPageName();
						if (tempPageName != null && tempPageName.length > 0)
							insidedata.name = tempPageName;

						tempPageName = getProductName();
						if (tempPageName != null && tempPageName.length > 0)
							insidedata.name = tempPageName;

						var tempcat = getCategory();
						if (tempcat != null && tempcat.length > 0) {
							if (tempcat.length > 149)
								tempcat = tempcat.substring(0, 149);
							insidedata.category = tempcat;
						}

						var tempval = getProductImage();
						if (tempval != null && tempval.length > 0) {
							insidedata.img = tempval;
						}
						else
							insidedata.type = "other";

						var tempsku = getProductSku();
						if (tempsku != null && tempsku.length > 0) {
							insidedata.sku = tempsku;
							insidedata.name = insidedata.name + " - " + tempsku;
						}
						else {
							insidedata.type = "other";
						}

						var tempprice = getProductPrice();
						if (tempprice != null && tempprice > 0)
							insidedata.price = tempprice;
						break;
					case "orderconfirmed":
						insidedata.name = "Order Confirmed";
						break;
					default:
						var tempPageName = getPageName();
						if (tempPageName != null && tempPageName.length > 0)
							insidedata.name = tempPageName;
				}

				if (add_tags.length > 0) {
					insidedata.tags = add_tags.join(",");
				}

				try {
					if (insidedata.type != "homepage" && insidedata.type != "search" && insidedata.type != "checkout") {
						var tempnode = getNode();
						if (tempnode)
							insidedata.node = tempnode;

						if (tempnode == 0 && insidedata.type == "article") {
							insidedata.node = 2;
						}
					}
				} catch (tempnodeex) { }

				// Get view insidedata from page

				return insidedata;
			}
			catch (ex) {
				log("getViewData error: ", ex);

				var insidedata = {};

				insidedata.action = "trackView";
				insidedata.type = "other";
				insidedata.url = window.location.href;
				insidedata.name = "Error: " + window.location.href;

				return insidedata;
			}
		}

		function getNode() {
			try {
				var tempurl = window.location.href.toLowerCase();
				if (tempurl.indexOf("/engagement") != -1) {
					return 1;
				}
				else if (tempurl.indexOf("/news") != -1) {
					return 2;
				}
				else if (tempurl.indexOf("/accessories") != -1 || tempurl.indexOf("/gifts") != -1) {
					return 12;
				}
				else if (tempurl.indexOf("/fragrances") != -1) {
					return 7;
				}
				else if (tempurl.indexOf("/watches") != -1) {
					return 5;
				}
				else if (tempurl.indexOf("/jewelry") != -1) {
					return 3;
				}
			} catch (tempex) { }

			return 0;
		}

		function getPageName() {
			// Modify if necessary
			try {
				var content = document.getElementsByTagName("title");
				if (typeof (content) != "undefined" && content != null && content.length > 0) {
					var result = content[0].textContent || content[0].innerText;
					if (typeof (result) != "undefined" && result != null && result.length > 0) {
						return myTrim(result);
					}
				}
			} catch (pagenameex) { }

			return null;
		}

		function getProductName() {
			try {
				if (typeof (_insideData) != "undefined" && _insideData.product && _insideData.product.name && _insideData.product.name.length > 0) {
					return _insideData.product.name;
				}
			} catch (tempex) { }

			try {
				if (_insideProduct && _insideProduct.name && _insideProduct.name.length > 0) {
					return _insideProduct.name;
				}
			} catch (tempex) { }

			try {
				var metaTags = document.getElementsByTagName("meta");

				var fbAppIdContent = "";
				for (var i = metaTags.length - 1; i >= 0; i--) {
					if (metaTags[i].getAttribute("property") == "og:title") {
						fbAppIdContent = metaTags[i].getAttribute("content");
						return fbAppIdContent;
					}
				}
			}
			catch (tempex) {
			}

			try {
				if (typeof (dataLayer) != "undefined" && dataLayer != null && dataLayer.length > 0) {
					for (var i = dataLayer.length - 1; i >= 0; i--) {
						if (typeof (dataLayer[i]) != "undefined" && dataLayer[i] != null && typeof (dataLayer[i].event) != "undefined" && dataLayer[i].event != null && dataLayer[i].event == "view_item" && typeof (dataLayer[i].ecommerce) != "undefined" && dataLayer[i].ecommerce != null
							&& typeof (dataLayer[i].ecommerce.items) != "undefined" && dataLayer[i].ecommerce.items != null && dataLayer[i].ecommerce.items.length > 0) {
							if (dataLayer[i].ecommerce.items[0].item_name)
								return dataLayer[i].ecommerce.items[0].item_name;
						}
					}
				}
			}
			catch (tempex) {
			}

			return null;
		}

		function getProductImage() {
			try {
				var ldjsons = _insideJQ('script[type="application/ld+json"]');
				for (var i = 0; i < ldjsons.length; i++) {
					var tempdata = JSON.parse(_insideJQ(ldjsons[i]).last().html().replace(/\n/g, ""));
					if (typeof (tempdata) != "undefined" && tempdata != null && _insideJQ.isArray(tempdata)) {
						for (var l = 0; l < tempdata.length; l++) {
							var tempdetail = tempdata[i];
							if (typeof (tempdetail) != "undefined" && tempdetail != null && typeof (tempdetail["@type"]) != "undefined" && tempdetail["@type"] != null && tempdetail["@type"] == "Product" && typeof (tempdetail.image) != "undefined" && tempdetail.image != null && tempdetail.image.length > 0) {
								if (_insideJQ.isArray(tempdetail.image)) {
									return tempdetail.image[0];
								}
								else
									return tempdetail.image;
							}
						}
					}
					else if (typeof (tempdata) != "undefined" && tempdata != null && typeof (tempdata["@type"]) != "undefined" && tempdata["@type"] != null && tempdata["@type"] == "Product" && typeof (tempdata.image) != "undefined" && tempdata.image != null && tempdata.image.length > 0) {
						if (_insideJQ.isArray(tempdata.image)) {
							return tempdata.image[0];
						}
						else
							return tempdata.image;
					}
				}
			}
			catch (tempex) {
			}

			try {
				var metaTags = document.getElementsByTagName("meta");

				var fbAppIdContent = "";
				for (var i = metaTags.length - 1; i >= 0; i--) {
					if (metaTags[i].getAttribute("property") == "og:image") {
						fbAppIdContent = metaTags[i].getAttribute("content");
						return fbAppIdContent;
					}
				}
			}
			catch (tempex) {
			}

			return null;
		}

		function getProductPrice() {
			try {
				if (typeof (_insideData) != "undefined" && _insideData.product && _insideData.product.price) {
					return _insideData.product.price;
				}
			} catch (tempex) { }

			try {
				if (_insideProduct && _insideProduct.price) {
					return _insideProduct.price;
				}
			} catch (tempex) { }

			try {
				if (typeof (dataLayer) != "undefined" && dataLayer != null && dataLayer.length > 0) {
					for (var i = dataLayer.length - 1; i >= 0; i--) {
						if (typeof (dataLayer[i]) != "undefined" && dataLayer[i] != null && typeof (dataLayer[i].event) != "undefined" && dataLayer[i].event != null && dataLayer[i].event == "view_item" && typeof (dataLayer[i].ecommerce) != "undefined" && dataLayer[i].ecommerce != null
							&& typeof (dataLayer[i].ecommerce.items) != "undefined" && dataLayer[i].ecommerce.items != null && dataLayer[i].ecommerce.items.length > 0) {
							if (dataLayer[i].ecommerce.items[0].price)
								return dataLayer[i].ecommerce.items[0].price;
						}
					}
				}
			}
			catch (tempex) {
			}

			return null;
		}

		function getProductSku() {
			try {
				if (typeof (_insideData) != "undefined" && _insideData.product && _insideData.product.sku) {
					return _insideData.product.sku;
				}
			} catch (tempex) { }

			try {
				if (_insideProduct && _insideProduct.id && _insideProduct.id.length > 0) {
					return _insideProduct.id;
				}
			} catch (tempex) { }

			try {
				if (typeof (dataLayer) != "undefined" && dataLayer != null && dataLayer.length > 0) {
					for (var i = dataLayer.length - 1; i >= 0; i--) {
						if (typeof (dataLayer[i]) != "undefined" && dataLayer[i] != null && typeof (dataLayer[i].event) != "undefined" && dataLayer[i].event != null && dataLayer[i].event == "view_item" && typeof (dataLayer[i].ecommerce) != "undefined" && dataLayer[i].ecommerce != null
							&& typeof (dataLayer[i].ecommerce.items) != "undefined" && dataLayer[i].ecommerce.items != null && dataLayer[i].ecommerce.items.length > 0) {
							if (dataLayer[i].ecommerce.items[0].item_id)
								return dataLayer[i].ecommerce.items[0].item_id;
						}
					}
				}
			}
			catch (tempex) {
			}

			return null;
		}

		function getCategory() {
			try {
				var breadcrumbs = _insideJQ(".pdp-main__breadcrumbs li.breadcrumbs__item");

				if (breadcrumbs != null && breadcrumbs.length > 0) {
					var path = "";
					for (var i = 1; i < breadcrumbs.length; i++) {
						var temp = breadcrumbs[i].innerText || breadcrumbs[i].textContent;
						var tempelem = breadcrumbs[i].getElementsByTagName("a");
						if (tempelem != null && tempelem.length > 0) {
							temp = tempelem[0].innerText || tempelem[0].textContent;
						}
						temp = myTrim(temp);
						if (temp != "/")
							path += (path != "" ? " / " : "") + temp;
					}
					if (path != "")
						return path;

				}
			}
			catch (tempex) {
			}

			return null;
		}

		function getOrderData() {
			try {
				var data = [];
				var totalprice = 0;
				var orderId = "auto";

				_insideJQ(".miniCart__items:first .cart-list-item").each(function (index) {
					var tempitem = _insideJQ(this);
					var insideitem = {};
					insideitem.action = "addItem";
					insideitem.orderId = orderId;
					var tempimg = tempitem.find(".cart-list-item__image img").get(0).currentSrc;
					if (tempimg) {
						insideitem.img = tempimg;
					}
					var tempitemurl = tempitem.find("a.image-link").prop("href");
					if (tempitemurl != null && tempitemurl.length > 0) {
						insideitem.url = tempitemurl;
					}
					insideitem.qty = 1;

					insideitem.name = myTrim(tempitem.find(".cart-list-item__name").text());

					var tempprice = tempitem.find(".price .value").attr("data-ytos-price");
					insideitem.price = parseFloat(tempprice);

					try {
						var tempremove = tempitem.find("button.removeItem").data();
						if (tempremove) {
							if (tempremove.ytosOpt && tempremove.ytosOpt.options) {
								if (tempremove.ytosOpt.options.skuMfPartNumber)
									insideitem.sku = tempremove.ytosOpt.options.skuMfPartNumber;
							}
						}
					} catch (tempex) { }

					totalprice = totalprice + insideitem.price;
					insideitem.price = insideitem.price / insideitem.qty;

					if (insideitem.name && insideitem.sku)
						data.push(insideitem);
				});

				if (data.length > 0) {
					data.push({
						"action": "trackOrder",
						"orderId": orderId,
						"orderTotal": totalprice
					});

					sessionStorage.setItem("insideordertotal", totalprice);

					return data;
				}
			}
			catch (ex) {
				log("getOrderData error. ", ex);
			}

			try {
				var data = [];
				var totalprice = 0;
				var orderId = "auto";

				_insideJQ(".header__minicart-overlay:first .product-line-item ").each(function (index) {
					var tempitem = _insideJQ(this);
					var insideitem = {};
					insideitem.action = "addItem";
					insideitem.orderId = orderId;
					var tempimg = tempitem.find("img.product-line-item__image").get(0).currentSrc;
					if (tempimg) {
						insideitem.img = tempimg;
					}
					var tempitemurl = tempitem.find("a.product-line-item__image-wrap.link").prop("href");
					if (tempitemurl != null && tempitemurl.length > 0) {
						insideitem.url = tempitemurl;
					}
					insideitem.qty = 1;

					insideitem.name = tempitem.find("img.product-line-item__image").attr("alt");

					var tempprice = tempitem.find(".line-item-total-price-amount").text();
					var decimalSign = getDecimalSign(myTrim(tempprice.replace(/[^\d.,]/g, '')));
					if (decimalSign == ",") {
						tempprice = tempprice.replace(/[.]/g, "");
						tempprice = tempprice.replace(",", ".");
					}
					insideitem.price = parseFloat(tempprice.replace(/[^0-9\.\-\+]/g, ""));

					try {
						var tempskudata = tempitem.data();
						if (tempskudata && tempskudata.pid) {
							insideitem.sku = tempskudata.pid;
						}
					} catch (tempex) { }

					totalprice = totalprice + insideitem.price;
					insideitem.price = insideitem.price / insideitem.qty;

					data.push(insideitem);
				});

				if (data.length > 0) {
					data.push({
						"action": "trackOrder",
						"orderId": orderId,
						"orderTotal": totalprice
					});

					sessionStorage.setItem("insideordertotal", totalprice);

					return data;
				}
			}
			catch (ex) {
				log("getOrderData error. ", ex);
			}

			try {
				var data = [];
				var totalprice = 0;
				var orderId = "auto";

				_insideJQ(".cart__items:first .product-line-item").each(function (index) {
					var tempitem = _insideJQ(this);
					var insideitem = {};
					insideitem.action = "addItem";
					insideitem.orderId = orderId;
					var tempimg = tempitem.find("img.product-line-item__image").get(0).currentSrc;
					if (tempimg) {
						insideitem.img = tempimg;
					}
					var tempitemurl = tempitem.find("a.product-line-item__image-wrap.link").prop("href");
					if (tempitemurl != null && tempitemurl.length > 0) {
						insideitem.url = tempitemurl;
					}
					insideitem.qty = 1;

					insideitem.name = tempitem.find("img.product-line-item__image").attr("alt");

					var tempprice = tempitem.find(".line-item-total-price-amount").first().text();
					var decimalSign = getDecimalSign(myTrim(tempprice.replace(/[^\d.,]/g, '')));
					if (decimalSign == ",") {
						tempprice = tempprice.replace(/[.]/g, "");
						tempprice = tempprice.replace(",", ".");
					}
					insideitem.price = parseFloat(tempprice.replace(/[^0-9\.\-\+]/g, ""));

					try {
						var tempskudata = tempitem.data();
						if (tempskudata && tempskudata.pid) {
							insideitem.sku = tempskudata.pid;
						}
					} catch (tempex) { }

					totalprice = totalprice + insideitem.price;
					insideitem.price = insideitem.price / insideitem.qty;

					data.push(insideitem);
				});

				if (data.length > 0) {
					try {
						var temptext = _insideJQ(".grand-total .grand-total-sum").first().text();
						if (temptext != null && temptext.length > 0) {
							var decimalSign = getDecimalSign(myTrim(temptext.replace(/[^\d.,]/g, '')));
							if (decimalSign == ",") {
								temptext = temptext.replace(/[.]/g, "");
								temptext = temptext.replace(",", ".");
							}
							temptext = parseFloat(temptext.replace(/[^0-9\.\-\+]/g, ""));
							if (isNumeric(temptext))
								totalprice = temptext;
						}
					} catch (totalex) { }

					data.push({
						"action": "trackOrder",
						"orderId": orderId,
						"orderTotal": totalprice
					});

					sessionStorage.setItem("insideordertotal", totalprice);

					return data;
				}
			}
			catch (ex) {
				log("getOrderData error. ", ex);
			}

			try {
				var data = [];
				var totalprice = 0;
				var orderId = "auto";

				_insideJQ(".order-summary__products:first .product-line-item").each(function (index) {
					var tempitem = _insideJQ(this);
					var insideitem = {};
					insideitem.action = "addItem";
					insideitem.orderId = orderId;
					var tempimg = tempitem.find("img.product-line-item__image").get(0).currentSrc;
					if (tempimg) {
						insideitem.img = tempimg;
					}
					var tempitemurl = tempitem.find("a.product-line-item__image-wrap.link").prop("href");
					if (tempitemurl != null && tempitemurl.length > 0) {
						insideitem.url = tempitemurl;
					}
					insideitem.qty = 1;

					insideitem.name = tempitem.find("img.product-line-item__image").attr("alt");

					var tempprice = tempitem.find(".line-item-total-price-amount").text();
					var decimalSign = getDecimalSign(myTrim(tempprice.replace(/[^\d.,]/g, '')));
					if (decimalSign == ",") {
						tempprice = tempprice.replace(/[.]/g, "");
						tempprice = tempprice.replace(",", ".");
					}
					insideitem.price = parseFloat(tempprice.replace(/[^0-9\.\-\+]/g, ""));

					try {
						var tempskudata = tempitem.data();
						if (tempskudata && tempskudata.pid) {
							insideitem.sku = tempskudata.pid;
						}
					} catch (tempex) { }

					totalprice = totalprice + insideitem.price;
					insideitem.price = insideitem.price / insideitem.qty;

					data.push(insideitem);
				});

				if (data.length > 0) {
					try {
						var temptext = _insideJQ(".grand-total .grand-total-sum").first().text();
						if (temptext != null && temptext.length > 0) {
							var decimalSign = getDecimalSign(myTrim(temptext.replace(/[^\d.,]/g, '')));
							if (decimalSign == ",") {
								temptext = temptext.replace(/[.]/g, "");
								temptext = temptext.replace(",", ".");
							}
							temptext = parseFloat(temptext.replace(/[^0-9\.\-\+]/g, ""));
							if (isNumeric(temptext))
								totalprice = temptext;
						}
					} catch (totalex) { }

					data.push({
						"action": "trackOrder",
						"orderId": orderId,
						"orderTotal": totalprice
					});

					sessionStorage.setItem("insideordertotal", totalprice);

					return data;
				}
			}
			catch (ex) {
				log("getOrderData error. ", ex);
			}

			try {
				var data = [];
				var totalprice = 0;
				var orderId = "auto";

				var tempdataprods = null;
				try {
					if (typeof (dataLayer) != "undefined" && dataLayer != null && dataLayer.length > 0) {
						for (var i = dataLayer.length - 1; i >= 0; i--) {
							if (typeof (dataLayer[i]) != "undefined" && dataLayer[i] != null && typeof (dataLayer[i].eeAction) != "undefined" && dataLayer[i].eeAction != null && dataLayer[i].eeAction.length > 0
								&& dataLayer[i].eeAction.toLowerCase() == "eecheckout" && typeof (dataLayer[i].products) != "undefined" && dataLayer[i].products != null && dataLayer[i].products.length > 0) {
								tempdataprods = dataLayer[i].products;
								break;
							}
						}
					}
				} catch (tempex) { log(tempex) }

				if (tempdataprods != null && tempdataprods.length > 0) {
					for (var i = 0; i < tempdataprods.length; i++) {
						var insideitem = {};
						insideitem.action = "addItem";
						insideitem.orderId = orderId;

						if (tempdataprods[i].name && tempdataprods[i].name.length > 0)
							insideitem.name = tempdataprods[i].name;

						if (tempdataprods[i].id)
							insideitem.sku = tempdataprods[i].id;

						if (tempdataprods[i].price && isNumeric(tempdataprods[i].price)) {
							insideitem.price = parseFloat(tempdataprods[i].price);
							if (tempdataprods[i].quantity && isNumeric(tempdataprods[i].quantity)) {
								insideitem.qty = parseFloat(tempdataprods[i].quantity);
							}
						}

						if (tempdataprods[i].category) {
							insideitem.category = tempdataprods[i].category;
							if (insideitem.category.length > 149)
								insideitem.category = insideitem.category.substring(0, 149);
						}

						// if (insideitem.sku.indexOf("CR") == -1) {
						// 	insideitem.sku = "CR" + insideitem.sku;
						// }

						try {
							var tempimgele = _insideJQ("li.product-inbag[data-productid='" + tempdataprods[i].productRef + "'] img")
							if (tempimgele.length > 0)
								insideitem.img = tempimgele.get(0).currentSrc;
						} catch (tempimgex) { }

						totalprice = totalprice + (insideitem.price * insideitem.qty);

						data.push(insideitem);
					}
				}

				if (data.length > 0) {

					data.push({
						"action": "trackOrder",
						"orderId": orderId,
						"orderTotal": totalprice
					});

					sessionStorage.setItem("insideordertotal", totalprice);

					return data;
				}
			}
			catch (ex) {
				log("getOrderData error. ", ex);
			}

			try {
				var data = [];
				var totalprice = 0;
				var orderId = "auto";

				var tempcartitems = null;
				if (typeof (dataLayer) != "undefined" && dataLayer != null && dataLayer.length > 0) {
					for (var i = dataLayer.length - 1; i >= 0; i--) {
						if (typeof (dataLayer[i]) != "undefined" && dataLayer[i] != null && typeof (dataLayer[i].event) != "undefined" && dataLayer[i].event != null && (dataLayer[i].event == "view_cart" || dataLayer[i].event == "begin_checkout") && typeof (dataLayer[i].ecommerce) != "undefined" && dataLayer[i].ecommerce != null
							&& typeof (dataLayer[i].ecommerce.items) != "undefined" && dataLayer[i].ecommerce.items != null
							&& dataLayer[i].ecommerce.items.length > 0) {
							tempcartitems = dataLayer[i].ecommerce.items;
							break;
						}
					}
				}

				if (tempcartitems != null && tempcartitems.length > 0) {
					for (var i = 0; i < tempcartitems.length; i++) {
						var insideitem = {};
						insideitem.action = "addItem";
						insideitem.orderId = orderId;
						var tempitem = tempcartitems[i];
						insideitem.sku = tempitem.item_id;
						if (tempitem.item_id)
							insideitem.item_id = tempitem.item_id;
						insideitem.name = insideitem.sku;
						if (tempitem.item_name)
							insideitem.name = tempitem.item_name;
						insideitem.price = parseFloat(tempitem.price);
						insideitem.qty = parseFloat(tempitem.quantity);

						totalprice = totalprice + (insideitem.price * insideitem.qty);

						data.push(insideitem);
					}

					if (data.length > 0) {

						data.push({
							"action": "trackOrder",
							"orderId": "auto",
							"orderTotal": totalprice
						});

						return data;
					}
				}
			}
			catch (ex) {
				log("getOrderData error. ", ex);
			}

			try {
				var data = [];
				var totalprice = 0;
				var orderId = "auto";
				var dataLayerTotal = 0;

				var tempcartitems = null;
				if (typeof (tc_vars) != "undefined" && tc_vars != null && tc_vars.cart_total && tc_vars.cart_items) {
					dataLayerTotal = tc_vars.cart_total;
					tempcartitems = tc_vars.cart_items;
				}

				if (tempcartitems != null && tempcartitems.length > 0) {
					var tempimgs = _insideJQ(".cart__products-list .cart-list-item .image-wrapper img");

					_insideJQ.each(tempcartitems, function (tempindex, tempitem) {
						var insideitem = {};
						insideitem.action = "addItem";
						insideitem.orderId = orderId;
						if (tempitem.cart_item_product_variant_id)
							insideitem.sku = tempitem.cart_item_product_variant_id;
						else if (tempitem.cart_item_product_id)
							insideitem.sku = tempitem.cart_item_product_id;
						insideitem.name = tempitem.cart_item_name;
						if (tempitem.cart_item_unitprice_ati)
							insideitem.price = parseFloat(tempitem.cart_item_unitprice_ati);
						if (tempitem.cart_item_unit_discounted_ati)
							insideitem.price = parseFloat(tempitem.cart_item_unit_discounted_ati);
						insideitem.qty = parseFloat(tempitem.cart_item_quantity);

						totalprice = totalprice + (insideitem.price * insideitem.qty);

						try {
							if (tempitem.cart_item_macro_category) {
								insideitem.category = tempitem.cart_item_macro_category;
								if (tempitem.cart_item_micro_category) {
									insideitem.category = insideitem.category + " / " + tempitem.cart_item_micro_category;
								}
								if (insideitem.category.length > 149)
									insideitem.category = insideitem.category.substring(0, 149);
							}
						} catch (tempex) { }

						// try {
						// 	if (tempimgs.length == tempcartitems.length) {
						// 		insideitem.img = tempimgs.get(i).currentSrc;
						// 	}
						// } catch (tempex) { }

						try {
							if (tempimgs.length > 0 && insideitem.sku) {
								tempimgs.each(function (rowindex) {
									var tempalt = _insideJQ(this).get(0).currentSrc;
									if (tempalt.toLowerCase().indexOf(insideitem.sku.toLowerCase()) != -1) {
										insideitem.img = tempalt;
									}
								});
							}
						} catch (imgex) { log(imgex) }

						data.push(insideitem);
					});

					if (data.length > 0) {
						try {
							if (dataLayerTotal) {
								totalprice = parseFloat(dataLayerTotal);
							}
						} catch (tempex) { }

						data.push({
							"action": "trackOrder",
							"orderId": "auto",
							"orderTotal": totalprice
						});

						sessionStorage.setItem("insideordertotal", totalprice);

						return data;
					}
				}
			}
			catch (ex) {
				log("getOrderData error. ", ex);
			}

			try {
				var data = [];
				var totalprice = 0;
				var orderId = "auto";

				_insideJQ(".js-basket-list:first .js-basket-product-details").each(function (index) {
					var tempitem = _insideJQ(this);
					var insideitem = {};
					insideitem.action = "addItem";
					insideitem.orderId = orderId;
					var tempimg = tempitem.find("img.js-basket-product-img").get(0).currentSrc;
					if (tempimg) {
						insideitem.img = tempimg;
					}
					insideitem.qty = 1;

					insideitem.name = tempitem.find("img.js-basket-product-img").attr("alt");

					var tempprice = tempitem.find(".js-basket-product-amount").text();
					var decimalSign = getDecimalSign(myTrim(tempprice.replace(/[^\d.,]/g, '')));
					if (decimalSign == ",") {
						tempprice = tempprice.replace(/[.]/g, "");
						tempprice = tempprice.replace(",", ".");
					}
					insideitem.price = parseFloat(tempprice.replace(/[^0-9\.\-\+]/g, ""));

					try {
						var tempskudata = tempitem.data();
						if (tempskudata && tempskudata.pid) {
							insideitem.sku = tempskudata.pid;
						}
					} catch (tempex) { }

					totalprice = totalprice + insideitem.price;
					insideitem.price = insideitem.price / insideitem.qty;

					data.push(insideitem);
				});

				if (data.length > 0) {

					data.push({
						"action": "trackOrder",
						"orderId": orderId,
						"orderTotal": totalprice
					});

					sessionStorage.setItem("insideordertotal", totalprice);

					return data;
				}
			}
			catch (ex) {
				log("getOrderData error. ", ex);
			}

			try {
				var data = [];
				var totalprice = 0;
				var orderId = "auto";

				if (typeof (_insideData) != "undefined" && _insideData != null && _insideData.cart.items) {
					_insideJQ.each(_insideData.cart.items, function (tempindex, tempitem) {
						var insideitem = {};
						if (tempitem.sku) {
							insideitem.action = "addItem";
							insideitem.orderId = orderId;
							insideitem.name = tempitem.sku;
							insideitem.price = parseFloat(tempitem.price);
							insideitem.qty = parseFloat(tempitem.qty);
							insideitem.sku = tempitem.sku;
							try {
								if (tempitem.category) {
									insideitem.category = tempitem.category;
									if (insideitem.category.length > 149)
										insideitem.category = insideitem.category.substring(0, 149);
								}

								if (tempitem.itemurl) {
									insideitem.url = tempitem.itemurl;
								}
								if (tempitem.img) {
									insideitem.img = tempitem.img;
								}
								if (tempitem.name) {
									insideitem.name = tempitem.name;
								}
							} catch (tempex) { }

							totalprice = totalprice + (insideitem.qty * insideitem.price);

							data.push(insideitem);
						}
					});
				}

				if (data.length > 0) {
					try {
						if (_insideData.cart.total && isNumeric(_insideData.cart.total))
							totalprice = _insideData.cart.total;
					} catch (totalex) { }

					data.push({
						"action": "trackOrder",
						"orderId": orderId,
						"orderTotal": totalprice
					});

					sessionStorage.setItem("insideordertotal", totalprice);

					return data;
				}
			}
			catch (ex) {
				log("getOrderData error. ", ex);
			}

			return null;
		}

		function orderConfirmProcess() {
			try {
				var data = [];
				var tempcurrency = null;

				var detail = null;
				if (typeof (_insideData) != "undefined" && _insideData != null && _insideData.order && _insideData.order.total && _insideData.order.id) {
					detail = _insideData.order;
				}

				if (detail != null) {
					var totalprice = detail.total;
					var orderID = detail.id;
					var temppurchasedata = {};

					if (typeof (detail.shipping) != "undefined" && detail.shipping != null) {
						temppurchasedata.shipping = detail.shipping;
					}
					if (typeof (detail.tax) != "undefined" && detail.tax != null) {
						temppurchasedata.tax = detail.tax;
					}
					if (tempcurrency != null) {
						temppurchasedata.currency = tempcurrency;
					}

					if (typeof (orderID) != "undefined" && orderID != null && orderID != "auto") {
						try {
							var lastOrderID = sessionStorage.getItem("insidelastorderid");
							if (lastOrderID == orderID) {
								return null;
							}
						}
						catch (orderidex) {
						}

						data.push({
							"action": "trackOrder",
							"orderId": "auto",
							"newOrderId": orderID,
							"orderTotal": totalprice,
							"data": temppurchasedata,
							"update": true,
							"complete": true
						});

						return data;
					}
				}
			}
			catch (ex) {
				log("orderConfirmProcess error. ", ex);
			}

			return null;
		}

		function getVisitorId() {
			try {
				if (typeof (dataLayer) != "undefined" && dataLayer != null && dataLayer.length > 0) {
					for (var i = dataLayer.length - 1; i >= 0; i--) {
						if (dataLayer[i] && dataLayer[i].userStatus && dataLayer[i].userStatus == "logged" && dataLayer[i].userId) {
							return dataLayer[i].userId;
						}
					}
				}
			}
			catch (visitidex) {
			}

			return null;
		}

		function getVisitorName() {
			try {
				var tempuserid = getVisitorId();
				if (tempuserid) {
					var tempname = _insideJQ("span[aria-label='User name'].pan-menu-user-details-sm").text();
					if (tempname.length > 0)
						return tempname;
				}
			}
			catch (visitidex) {
			}

			return null;
		}

		function getVisitorData() {
			try {
				var tempdata = {};

				if (_insideDataLayer) {
					if (_insideDataLayer.language) {
						tempdata.language = _insideDataLayer.language;
						if (tempdata.language.indexOf("-") != -1)
							tempdata.language = tempdata.language.split("-")[0];
					}
					if (_insideDataLayer.country)
						tempdata.country = _insideDataLayer.country;
				}

				try {
					if (typeof (_insideData) != "undefined" && _insideData != null) {
						if (_insideData.website) {
							if (_insideData.website.language && _insideData.website.language.length == 2)
								tempdata.language = _insideData.website.language;
							if (_insideData.website.country)
								tempdata.country = _insideData.website.country;
						}
					}
				} catch (tempex) { }

				try {
					if (tempdata.language) {
						tempdata.df_language = tempdata.language.toLowerCase();
					}
					if (tempdata.country) {
						tempdata.df_country = tempdata.country.toLowerCase();
					}
				} catch (tempex) { }

				try {
					if (typeof (_insideData) != "undefined" && _insideData != null) {
						if (_insideData.user) {
							if (_insideData.user.sfmc_id)
								tempdata.sfmc_id = _insideData.user.sfmc_id;
							if (_insideData.user.user_id)
								tempdata.web_userid = _insideData.user.user_id;
						}
					}
				} catch (tempex) { }

				return tempdata;
			}
			catch (visitidex) {
			}

			return null;
		}

		function insertInsideTag() {
			try {
				_insideGraph.processQueue();
			}
			catch (tempex) {
			}
		}

		function sendToInside() {
			try {
				tracker.url = window.location.href;

				var visitorId = getVisitorId();
				if (visitorId != null && visitorId.length > 0) {
					tracker.visitorId = visitorId;
				}

				var visitorName = getVisitorName();
				if (visitorName != null && visitorName.length > 0) {
					tracker.visitorName = visitorName;
				}

				var visitorData = getVisitorData();
				if (visitorData != null) {
					tracker.visitorData = visitorData;
				}

				var view = getViewData();
				if (view != null) {
					if (view.type == "orderconfirmed") {
						var tempconfirm = orderConfirmProcess();
						if (tempconfirm != null && tempconfirm.length > 0) {
							for (var i = 0; i < tempconfirm.length; i++) {
								_inside.push(tempconfirm[i]);

								try {
									if (tempconfirm[i].action == "trackOrder")
										if (typeof (tempconfirm[i].newOrderId) != "undefined" && tempconfirm[i].newOrderId != null)
											sessionStorage.setItem("insidelastorderid", tempconfirm[i].newOrderId);
								}
								catch (tempex) {
								}
							}

							sessionStorage.removeItem("insideordertotal");
						}
						else {
							view.type == "other";
						}
					}
					else {
						var orderData = getOrderData();

						if (orderData != null && orderData.length > 0) {
							for (var i = 0; i < orderData.length; i++) {
								_inside.push(orderData[i]);
								if (orderData[i].action == "trackOrder") {
									view.orderId = orderData[i].orderId;
									view.orderTotal = orderData[i].orderTotal;
									insideOrderTotal = orderData[i].orderTotal;
								}
							}
						}
						else if (view.url.toLowerCase().indexOf("/cart") != -1) {
							sessionStorage.removeItem("insideordertotal");
						}
						else {
							try {
								var tempcount = myTrim(_insideJQ(".cc-quantity.js-minicart-quantity").text());
								if (tempcount == "") {
									tempcount = myTrim(_insideJQ(".iconbox__number.js-cart-count").text());
									if (tempcount == "") {
										tempcount = myTrim(_insideJQ(".header__minicart .header__utility-badge").text());
									}
								}

								if (tempcount) {
									tempcount = parseFloat(tempcount);
									if (isNumeric(tempcount) && tempcount > 0) {
										var temptotal = sessionStorage.getItem("insideordertotal");

										if (temptotal && temptotal > 0) {
											view.orderId = "auto";
											view.orderTotal = temptotal;
										}
									}
								}
							} catch (tempex) { }
						}
					}

					// Add currency code
					try {
						try {
							if (typeof (dataLayer) != "undefined" && dataLayer != null && dataLayer.length > 0) {
								for (var i = dataLayer.length - 1; i >= 0; i--) {
									if (dataLayer[i] && dataLayer[i].currencyCode) {
										_insideCurrency = dataLayer[i].currencyCode;
										break;
									}
								}
							}

							if (typeof (_insideData) != "undefined" && _insideData != null && _insideData.website && _insideData.website.currency && _insideData.website.currency.length == 3) {
								_insideCurrency = _insideData.website.currency.toUpperCase();
							}
						} catch (currencyex) { }

						if (_insideCurrency) {
							if (_inside != null && _inside.length > 0) {
								for (var i = 0; i < _inside.length; i++) {
									if (_inside[i].action == "trackOrder") {
										if (typeof (_inside[i].data) == "undefined" || _inside[i].data == null) {
											_inside[i].data = {};
										}

										if (typeof (_inside[i].data.currency) == "undefined" || _inside[i].data.currency == null) {
											_inside[i].data.currency = _insideCurrency;
										}
									}
								}
							}

							if (typeof (view.data) == "undefined" || view.data == null) {
								view.data = {};
							}
							view.data.currency = _insideCurrency;

							if (typeof (tracker.visitorData) == "undefined" || tracker.visitorData == null) {
								tracker.visitorData = {};
							}
							tracker.visitorData.currency = _insideCurrency;
						}
					} catch (currencyex) { }

					_inside.push(view);

					log("Inside Debug: ", _inside);
				}
			}
			catch (sendex) {
				_inside = [];

				_inside.push({
					"action": "trackView",
					"type": "other",
					"name": "Check: " + window.location.href
				});

				log(sendex);
			}

			insertInsideTag();
			if (!_insideFirstLoad)
				_insideFirstLoad = true;
		}

		var tempview = getViewData();
		if (tempview != null && typeof (tempview.type) != "undefined" && tempview.type != null && tempview.type == "orderconfirmed") {
			deferWait(sendToInside, function () {
				var tempconfirm = orderConfirmProcess();
				if (tempconfirm != null && tempconfirm.length > 0) {
					return true;
				}

				return document.readyState != 'loading' && document.readyState != 'interactive';
			});
		}
		else {
			deferWait(sendToInside, function () {
				if (document.readyState != 'loading' && document.readyState != 'interactive') {
					deferWait(function () { setTimeout(sendToInside, 1000) }, function () {
						if (!_insideFirstLoad)
							return false;

						if (typeof (_insideGraph) != "undefined" && _insideGraph != null) {
							var temporderdata = getOrderData();

							if (temporderdata != null && temporderdata.length > 0) {
								for (var i = 0; i < temporderdata.length; i++) {
									if (temporderdata[i].action == "trackOrder") {
										if (insideOrderTotal != temporderdata[i].orderTotal) {
											return true;
										}
									}
								}
							}
							else if (insideOrderTotal > 0) {
								insideOrderTotal = 0;
								return true;
							}

							temporderdata = orderConfirmProcess();
							if (temporderdata != null && temporderdata.length > 0) {
								return true;
							}
						}

						return false;
					});

					return true;
				}

				return false;
			});
		}
	}

	if (typeof (_insideGraph) != "undefined" && _insideGraph != null && typeof (_insideGraph.current) != "undefined" && _insideGraph.current != null) {
		processInside(_insideGraph.current)
	}
	else {
		var insideTracker = {
			"action": "getTracker",
			"crossDomain": false,
			"account": accountKey
		};

		try {
			var subsiteMapping = {
				"BE": "214",
				"HR": "215",
				"CZ": "216",
				"DK": "217",
				"DE": "218",
				"ES": "219",
				"FI": "220",
				"FR": "221",
				"GR": "222",
				"HU": "223",
				"IE": "224",
				"IT": "225",
				"LT": "226",
				"LU": "227",
				"MT": "228",
				"MC": "229",
				"NL": "230",
				"AT": "231",
				"PL": "232",
				"PT": "233",
				"RO": "234",
				"RU": "235",
				"SK": "236",
				"CH": "237",
				"SE": "238",
				"GB": "239",
				"UK": "239",
				"SA": "240",
				"AE": "241",
				"IN": "242",
				"BG": "255"
			};

			var tempPathArr = window.location.pathname.split("/").filter(function (p) { return p !== ""; });
			if (tempPathArr) {
				if (tempPathArr.length && tempPathArr.length > 0) {
					var tempcountry = tempPathArr[0].toUpperCase();
					if (tempcountry.indexOf("-") != -1)
						tempcountry = tempcountry.split("-")[1];
					if (subsiteMapping[tempcountry]) {
						subsiteId = subsiteMapping[tempcountry];
					}
				}
			}

			if (typeof (dataLayer) != "undefined" && dataLayer != null && dataLayer.length > 0) {
				for (var i = dataLayer.length - 1; i >= 0; i--) {
					if (dataLayer[i] && dataLayer[i].country) {
						var tempcountry = dataLayer[i].country.toUpperCase();
						if (subsiteMapping[tempcountry]) {
							subsiteId = subsiteMapping[tempcountry];
						}

						break;
					}
				}
			}

			if (typeof (_insideData) != "undefined" && _insideData != null && _insideData.website && _insideData.website.country) {
				var tempcountry = _insideData.website.country.toUpperCase();
				if (subsiteMapping[tempcountry]) {
					subsiteId = subsiteMapping[tempcountry];
				}
			}
		} catch (subsiteex) { }

		if (typeof (subsiteId) != "undefined" && subsiteId != null)
			insideTracker["subsiteId"] = subsiteId;

		_inside.push(insideTracker);

		_inside.push({
			"action": "bind",
			"name": "onload",
			"callback": function (tracker) {
				if (_insideFirstLoad)
					return;

				_insideJQ = _insideGraph.jQuery;

				processInside(tracker)
			}
		});
		(function (w, d, s, u) {
			a = d.createElement(s), m = d.getElementsByTagName(s)[0];
			a.async = 1;
			a.src = u;
			m.parentNode.insertBefore(a, m);
		})(window, document, "script", "//" + trackerURL + "/ig.js");
	}

})();